<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mini Netflix - Accueil</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: #141414;
            color: white;
            min-height: 100vh;
        }

        .header {
            background: linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0) 100%);
            padding: 20px 0;
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            color: #e50914;
            font-size: 2.5rem;
            font-weight: bold;
            text-decoration: none;
            text-transform: uppercase;
            letter-spacing: 2px;
        }

        .main-content {
            max-width: 1200px;
            margin: 100px auto 0;
            padding: 20px;
        }

        .upload-section {
            background: linear-gradient(45deg, #1f1f1f, #2f2f2f);
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 40px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .upload-form {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .file-input-wrapper {
            position: relative;
            flex-grow: 1;
        }

        .file-input {
            width: 100%;
            padding: 12px;
            background-color: #333;
            border: 2px dashed #555;
            border-radius: 8px;
            color: white;
            cursor: pointer;
        }

        .btn {
            background-color: #e50914;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: bold;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn:hover {
            background-color: #f40612;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(229, 9, 20, 0.3);
        }

        .section-title {
            color: white;
            font-size: 1.8rem;
            margin-bottom: 25px;
            font-weight: 500;
        }

        .video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 25px;
            margin-top: 20px;
        }

        .video-card {
            background-color: #1f1f1f;
            border-radius: 12px;
            overflow: hidden;
            transition: all 0.3s ease;
            position: relative;
        }

        .video-card:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        }

        .video-card a {
            color: white;
            text-decoration: none;
            display: block;
        }

        .video-thumbnail {
            width: 100%;
            height: 180px;
            object-fit: cover;
            background-color: #000;
            transition: all 0.3s ease;
        }

        .video-thumbnail::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(to bottom, rgba(0,0,0,0.2) 0%, rgba(0,0,0,0.4) 100%);
            pointer-events: none;
        }

        .video-card:hover .video-thumbnail {
            filter: brightness(1.2);
        }

        .video-info {
            padding: 15px;
            background: linear-gradient(to top, rgba(0,0,0,0.9) 0%, rgba(0,0,0,0) 100%);
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .video-title {
            font-size: 1rem;
            font-weight: 500;
            margin-bottom: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            flex-grow: 1;
        }

        .edit-button {
            background: none;
            border: none;
            color: #aaa;
            cursor: pointer;
            padding: 5px;
            margin-left: 10px;
            transition: color 0.3s ease;
        }

        .edit-button:hover {
            color: #e50914;
        }

        .edit-form {
            display: none;
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 15px;
            background: rgba(0, 0, 0, 0.9);
            z-index: 2;
        }

        .edit-form.active {
            display: flex;
            gap: 10px;
        }

        .edit-input {
            flex-grow: 1;
            padding: 8px;
            border: none;
            border-radius: 4px;
            background: #333;
            color: white;
        }

        .edit-buttons {
            display: flex;
            gap: 5px;
        }

        .edit-save, .edit-cancel {
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .edit-save {
            background: #e50914;
            color: white;
        }

        .edit-cancel {
            background: #333;
            color: white;
        }

        .edit-save:hover {
            background: #f40612;
        }

        .edit-cancel:hover {
            background: #444;
        }

        .video-duration {
            font-size: 0.8rem;
            color: #aaa;
        }

        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 15px;
            }

            .upload-form {
                flex-direction: column;
            }

            .video-grid {
                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <a href="/" class="logo">Mini Netflix</a>
        </div>
    </header>

    <main class="main-content">
        <section class="upload-section">
            <form class="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                <div class="file-input-wrapper">
                    <input type="file" name="videoFile" accept="video/*" required class="file-input">
                </div>
                <button type="submit" class="btn">Uploader</button>
            </form>
        </section>

        <h2 class="section-title">Vidéos Disponibles</h2>
        <div class="video-grid">
            <% videos.forEach(function(video) { %>
                <div class="video-card">
                    <a href="/player/<%= video %>">
                        <video class="video-thumbnail" muted>
                            <source src="/uploads/<%= video %>" type="video/mp4">
                        </video>
                        <div class="video-info">
                            <div class="video-title"><%= video.replace(/\.[^/.]+$/, "") %></div>
                            <button class="edit-button" onclick="event.preventDefault(); showEditForm(this)">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                </svg>
                            </button>
                        </div>
                        <form class="edit-form" onsubmit="event.preventDefault(); renameVideo(this, '<%= video %>')">
                            <input type="text" class="edit-input" value="<%= video.replace(/\.[^/.]+$/, "") %>">
                            <div class="edit-buttons">
                                <button type="submit" class="edit-save">✓</button>
                                <button type="button" class="edit-cancel" onclick="hideEditForm(this)">✕</button>
                            </div>
                        </form>
                    </a>
                </div>
            <% }); %>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const videos = document.querySelectorAll('.video-thumbnail');
            videos.forEach(video => {
                video.addEventListener('loadeddata', function() {
                    this.currentTime = Math.random() * (this.duration - 1);
                });

                video.addEventListener('mouseover', function() {
                    this.currentTime = Math.random() * (this.duration - 1);
                    this.play();
                });
                video.addEventListener('mouseout', function() {
                    this.pause();
                });
            });

            const fileInput = document.querySelector('.file-input');
            fileInput.addEventListener('change', function() {
                if (this.files.length > 0) {
                    this.style.borderColor = '#e50914';
                } else {
                    this.style.borderColor = '#555';
                }
            });
        });

        function showEditForm(button) {
            const videoCard = button.closest('.video-card');
            const editForm = videoCard.querySelector('.edit-form');
            const videoInfo = videoCard.querySelector('.video-info');
            
            videoInfo.style.display = 'none';
            editForm.classList.add('active');
            editForm.querySelector('input').focus();
        }

        function hideEditForm(button) {
            const videoCard = button.closest('.video-card');
            const editForm = videoCard.querySelector('.edit-form');
            const videoInfo = videoCard.querySelector('.video-info');
            
            editForm.classList.remove('active');
            videoInfo.style.display = 'flex';
        }

        function renameVideo(form, oldName) {
            const newName = form.querySelector('input').value.trim();
            if (!newName) return;

            fetch('/rename', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    oldName: oldName,
                    newName: newName
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    alert('Erreur lors du renommage de la vidéo');
                }
            })
            .catch(error => {
                console.error('Erreur:', error);
                alert('Erreur lors du renommage de la vidéo');
            });
        }
    </script>
</body>
</html> 